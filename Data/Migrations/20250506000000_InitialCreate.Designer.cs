// <auto-generated />
using System;
using ClipsAutomation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClipsAutomation.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250506000000_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .UseIdentityColumns();

            modelBuilder.Entity("ClipsAutomation.Models.GeneratedClip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("DurationSeconds")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCaptions")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VideoProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VideoProjectId");

                    b.ToTable("GeneratedClips");
                });

            modelBuilder.Entity("ClipsAutomation.Models.ProcessingOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AddBackgroundMusic")
                        .HasColumnType("bit");

                    b.Property<bool>("ApplyVideoEnhancements")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoGenerateCaptions")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoZoomVertical")
                        .HasColumnType("bit");

                    b.Property<int>("MaxClipDurationSeconds")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfClips")
                        .HasColumnType("int");

                    b.Property<int>("MinClipDurationSeconds")
                        .HasColumnType("int");

                    b.Property<int>("MusicVolumePercent")
                        .HasColumnType("int");

                    b.Property<int>("VideoProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VideoProjectId")
                        .IsUnique();

                    b.ToTable("ProcessingOptions");
                });

            modelBuilder.Entity("ClipsAutomation.Models.VideoProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<bool>("HasTranscript")
                        .HasColumnType("bit");

                    b.Property<string>("LocalTranscriptPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalVideoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YouTubeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VideoProjects");
                });

            modelBuilder.Entity("ClipsAutomation.Models.VideoSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("EngagementScore")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("EndTimeSeconds")
                        .HasColumnType("float");

                    b.Property<bool>("SelectedForClip")
                        .HasColumnType("bit");

                    b.Property<double>("StartTimeSeconds")
                        .HasColumnType("float");

                    b.Property<string>("TranscriptText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VideoProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VideoProjectId");

                    b.ToTable("VideoSegments");
                });

            modelBuilder.Entity("GeneratedClipVideoSegment", b =>
                {
                    b.Property<int>("GeneratedClipId")
                        .HasColumnType("int");

                    b.Property<int>("IncludedSegmentsId")
                        .HasColumnType("int");

                    b.HasKey("GeneratedClipId", "IncludedSegmentsId");

                    b.HasIndex("IncludedSegmentsId");

                    b.ToTable("GeneratedClipVideoSegment");
                });

            modelBuilder.Entity("ClipsAutomation.Models.GeneratedClip", b =>
                {
                    b.HasOne("ClipsAutomation.Models.VideoProject", "VideoProject")
                        .WithMany("GeneratedClips")
                        .HasForeignKey("VideoProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VideoProject");
                });

            modelBuilder.Entity("ClipsAutomation.Models.ProcessingOptions", b =>
                {
                    b.HasOne("ClipsAutomation.Models.VideoProject", "VideoProject")
                        .WithOne("ProcessingOptions")
                        .HasForeignKey("ClipsAutomation.Models.ProcessingOptions", "VideoProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VideoProject");
                });

            modelBuilder.Entity("ClipsAutomation.Models.VideoSegment", b =>
                {
                    b.HasOne("ClipsAutomation.Models.VideoProject", "VideoProject")
                        .WithMany("VideoSegments")
                        .HasForeignKey("VideoProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VideoProject");
                });

            modelBuilder.Entity("GeneratedClipVideoSegment", b =>
                {
                    b.HasOne("ClipsAutomation.Models.GeneratedClip", null)
                        .WithMany()
                        .HasForeignKey("GeneratedClipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClipsAutomation.Models.VideoSegment", null)
                        .WithMany()
                        .HasForeignKey("IncludedSegmentsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ClipsAutomation.Models.VideoProject", b =>
                {
                    b.Navigation("GeneratedClips");

                    b.Navigation("ProcessingOptions");

                    b.Navigation("VideoSegments");
                });
#pragma warning restore 612, 618
        }
    }
} 